{"mappings":"ACGA,IAAM,EAAO,SAAS,gBAAgB,CAAC,WAmCjC,EAAK,SAAS,aAAa,CAAC,MAC5B,EA7BG,MAAM,IAAI,CA6BS,GA7BG,IAAI,CAAC,SAAC,CAAA,CAAS,CAA5C,EAIE,IAAM,EAAU,WAAW,EAAQ,OAAO,CAAC,MAAM,CAAC,OAAO,CAAC,UAAW,KAIrE,OAAO,AAHS,WAAW,EAAQ,OAAO,CAAC,MAAM,CAAC,OAAO,CAAC,UAAW,KAGpD,CACnB,GAOO,AAgBI,EAhBc,GAAG,CAAC,SAAC,CAA9B,EAAyC,OAAA,EAAO,WAAW,CAAC,IAAI,E,GAMhE,AAWU,EAXG,SAAS,CAAG,GAEzB,AASc,EATN,OAAO,CAAC,SAAC,CAAjB,EAA0B,OAAA,AAShB,EAT6B,WAAW,CAAC,E","sources":["<anon>","src/scripts/main.js"],"sourcesContent":["\"use strict\";\n// select all <li> that are direct child of <ul>\nvar list = document.querySelectorAll(\"ul > li\");\nfunction sortList(itemsList) {\n    // Return new sorted array\n    // originaly list = [li, li, li], each <li> is an object.\n    // Each <li> object has dataset.\n    // Each dataset has the salary key which stores string (salary value)\n    return Array.from(itemsList).sort(function(workerA, workerB) {\n        /* here we praseFloat/praseInt,\n        and replace all non-numerical cahracters with nothing.\n    */ var salaryA = parseFloat(workerA.dataset.salary.replace(/[^0-9]/g, \"\"));\n        var salaryB = parseFloat(workerB.dataset.salary.replace(/[^0-9]/g, \"\"));\n        // Sort logic.\n        return salaryB - salaryA;\n    });\n}\n// Extract names of employees from sortedList.\nfunction getEmployees(sortedListOfItems) {\n    // We extract name from textContent, as there is no dataset with employee name\n    // We also remove extra spaces using trim().\n    return sortedListOfItems.map(function(worker) {\n        return worker.textContent.trim();\n    });\n}\n// This was optional i guess.\nfunction replaceList(originalList, newList) {\n    // clear original list\n    originalList.innerHTML = \"\";\n    // iterate over sortedList and push each element to the 'html' list.\n    newList.forEach(function(item) {\n        return originalList.appendChild(item);\n    });\n}\n// Variables\nvar ul = document.querySelector(\"ul\");\nvar sortedList = sortList(list);\n// Usage\ngetEmployees(sortedList);\nreplaceList(ul, sortedList);\n\n//# sourceMappingURL=index.347706a5.js.map\n","'use strict';\n\n// select all <li> that are direct child of <ul>\nconst list = document.querySelectorAll('ul > li');\n\nfunction sortList(itemsList) {\n  // Return new sorted array\n  // originaly list = [li, li, li], each <li> is an object.\n  // Each <li> object has dataset.\n  // Each dataset has the salary key which stores string (salary value)\n  return Array.from(itemsList).sort((workerA, workerB) => {\n    /* here we praseFloat/praseInt,\n        and replace all non-numerical cahracters with nothing.\n    */\n    const salaryA = parseFloat(workerA.dataset.salary.replace(/[^0-9]/g, ''));\n    const salaryB = parseFloat(workerB.dataset.salary.replace(/[^0-9]/g, ''));\n\n    // Sort logic.\n    return salaryB - salaryA;\n  });\n}\n\n// Extract names of employees from sortedList.\nfunction getEmployees(sortedListOfItems) {\n  // We extract name from textContent, as there is no dataset with employee name\n  // We also remove extra spaces using trim().\n  return sortedListOfItems.map((worker) => worker.textContent.trim());\n}\n\n// This was optional i guess.\nfunction replaceList(originalList, newList) {\n  // clear original list\n  originalList.innerHTML = '';\n  // iterate over sortedList and push each element to the 'html' list.\n  newList.forEach((item) => originalList.appendChild(item));\n}\n\n// Variables\nconst ul = document.querySelector('ul');\nconst sortedList = sortList(list);\n\n// Usage\ngetEmployees(sortedList);\nreplaceList(ul, sortedList);\n"],"names":["list","document","querySelectorAll","ul","querySelector","sortedList","Array","from","sort","workerA","workerB","salaryA","parseFloat","dataset","salary","replace","salaryB","sortedListOfItems","map","worker","textContent","trim","originalList","innerHTML","newList","forEach","item","appendChild"],"version":3,"file":"index.347706a5.js.map"}